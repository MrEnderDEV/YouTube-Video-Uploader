package io.github.stekeblad.videouploader.settings;

import io.github.stekeblad.videouploader.utils.AlertUtils;
import io.github.stekeblad.videouploader.utils.ConfigManager;
import io.github.stekeblad.videouploader.youtube.LocalPlaylist;
import io.github.stekeblad.videouploader.youtube.utils.PlaylistUtils;
import io.github.stekeblad.videouploader.youtube.utils.VisibilityStatus;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.stage.WindowEvent;

import java.net.URL;
import java.util.*;

import static io.github.stekeblad.videouploader.youtube.Auth.AUTHMSG_DESC;
import static io.github.stekeblad.videouploader.youtube.Auth.AUTHMSG_HEADER;

public class ManagePlaylistsWindowController implements Initializable {
    public Button btn_refreshPlaylists;
    public Button btn_addNewPlaylist;
    public TextField txt_newPlaylistName;
    public ListView<CheckBox> list_playlists;
    public ChoiceBox<String> choice_privacyStatus;

    private ConfigManager configManager = ConfigManager.INSTANCE;
    private PlaylistUtils playlistUtils = PlaylistUtils.INSTANCE;

    /**
     * Initialize a few things when the window is opened
     * @param location provided by fxml
     * @param resources provided by fxml
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        // Insert the stored playlists into the list
        updatePlaylistList();

        // Set choices in playlist privacy choiceBox
        ArrayList<VisibilityStatus> statuses = new ArrayList<>(EnumSet.allOf(VisibilityStatus.class));
        ArrayList<String> visibilityStrings = new ArrayList<>();
        for (VisibilityStatus status : statuses) {
            visibilityStrings.add(status.getStatusName());
        }
        choice_privacyStatus.setItems(FXCollections.observableArrayList(visibilityStrings));
        choice_privacyStatus.getSelectionModel().select(VisibilityStatus.PUBLIC.getStatusName());
        choice_privacyStatus.setTooltip(new Tooltip("Yes, playlists can be public, unlisted or private"));

        btn_refreshPlaylists.setTooltip(new Tooltip("Downloads a list of all your playlists from YouTube"));

    }

    /**
     * Executed when the window's close button is triggered
     * @param windowEvent event generated by FXML
     */
    public void onWindowClose(WindowEvent windowEvent) {
        ObservableList<CheckBox> listItems = list_playlists.getItems();
        if (listItems.size() > 0) {
            for (CheckBox listItem : listItems) {
                playlistUtils.setVisible(listItem.getText(), listItem.isSelected());
            }
            playlistUtils.saveCache();
        }
        // event not consumed, it would cause the window to remain open
    }

    /**
     * Downloads a list of all playlists on the user's channel and updates the list on screen
     * @param actionEvent the button click event
     */
    public void onRefreshPlaylistsClicked(ActionEvent actionEvent) {
        if (configManager.getNeverAuthed()) {
            Optional<ButtonType> buttonChoice = AlertUtils.yesNo(AUTHMSG_HEADER, AUTHMSG_DESC).showAndWait();
            if (buttonChoice.isPresent()) {
                if (buttonChoice.get() == ButtonType.YES) {
                    configManager.setNeverAuthed(false);
                    configManager.saveSettings();
                } else { // ButtonType.NO or closed [X]
                    AlertUtils.simpleClose("Permission not Granted", "Permission to access your YouTube was denied, playlists will not be updated.").show();
                    actionEvent.consume();
                    return;
                }
            }
        }
        // Auth done or user is ready to allow it
        // Do not allow the button to be clicked again until the window is closed and reopened
        btn_refreshPlaylists.setDisable(true);

        // Send the request in the background
        Task<Void> backgroundTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                playlistUtils.refreshPlaylist();
                Platform.runLater(() -> updatePlaylistList());
                return null;
            }
        };

        Thread backgroundThread = new Thread(backgroundTask);
        // Define a handler for exceptions
        backgroundThread.setUncaughtExceptionHandler((t, e) -> Platform.runLater(() -> {
            AlertUtils.simpleClose("Error", "Request to download playlists failed").showAndWait();
            e.printStackTrace();
            btn_refreshPlaylists.setDisable(false);
        }));

        // Start downloading playlists in the background and return
        backgroundThread.start();
        actionEvent.consume();
    }

    /**
     * Creates a new playlist on the user's channel using the content of txt_newPlaylistName and choice_privacyStatus
     * @param actionEvent the button click event
     */
    public void onAddNewPlaylistClicked(ActionEvent actionEvent) {
        if(txt_newPlaylistName.getText().isEmpty()) {
            AlertUtils.simpleClose("Missing playlist name", "You need to specify a name to create a new playlist").show();
            return;
        }
        if (configManager.getNeverAuthed()) {
            Optional<ButtonType> buttonChoice = AlertUtils.yesNo(AUTHMSG_HEADER, AUTHMSG_DESC).showAndWait();
            if (buttonChoice.isPresent()) {
                if (buttonChoice.get() == ButtonType.YES) {
                    configManager.setNeverAuthed(false);
                    configManager.saveSettings();
                } else { // ButtonType.NO or closed [X]
                    AlertUtils.simpleClose("Permission not Granted",
                            "Permission to access your YouTube was denied, new playlist can not be created.").show();
                    actionEvent.consume();
                    return;
                }
            }
        }

        // Auth OK, add the playlist
        btn_addNewPlaylist.setDisable(true);
        btn_addNewPlaylist.setText("Adding...");
        final String listName = txt_newPlaylistName.getText();
        final String privacyLevel = choice_privacyStatus.getSelectionModel().getSelectedItem();

        // Perform the request in a background thread
        Task<Void> backgroundTask = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                LocalPlaylist localPlaylist = playlistUtils.addPlaylist(listName, privacyLevel);
                if (localPlaylist == null) {
                    Platform.runLater(() -> AlertUtils.simpleClose("Error", "Failed to create new playlist").show());
                    return null;
                }
                CheckBox cb = new CheckBox(localPlaylist.getName());
                cb.setSelected(true);
                Platform.runLater(() -> {
                    list_playlists.getItems().add(cb);
                    txt_newPlaylistName.setText(""); // visually indicate its done by clearing the new playlist name textField
                    btn_addNewPlaylist.setDisable(false);
                    btn_addNewPlaylist.setText("Create new playlist");
                });
                return null;
            }
        };
        Thread backgroundThread = new Thread(backgroundTask);
        // Exception handler
        backgroundThread.setUncaughtExceptionHandler((t, e) -> Platform.runLater(() -> {
            AlertUtils.simpleClose("Error", "Request to create new playlist failed").showAndWait();
            e.printStackTrace();
        }));

        // Start the background thread and return
        backgroundThread.start();
        actionEvent.consume();
    }

    /**
     * Makes sure the playlist list is up to date
     */
    private void updatePlaylistList() {
        ArrayList<CheckBox> playlistCheckBoxes = new ArrayList<>();
        ArrayList<LocalPlaylist> playlists = playlistUtils.getAllPlaylists();
        if (playlists != null) {
            for (LocalPlaylist playlist : playlists) {
                CheckBox cb = new CheckBox(playlist.getName());
                cb.setSelected(playlist.isVisible());
                playlistCheckBoxes.add(cb);
            }
            // Sorts the playlists lexicographically
            playlistCheckBoxes.sort(Comparator.comparing(Labeled::getText));
            list_playlists.setItems(FXCollections.observableArrayList(playlistCheckBoxes));
        }
    }
}
